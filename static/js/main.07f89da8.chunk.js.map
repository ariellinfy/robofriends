{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","redux/types.js","containers/App.js","redux/actions.js","redux/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILURE","App","onRequestRobots","searchfield","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRquest","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.07f89da8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t    {robots.map((user,i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\t\tkey={user.id} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n   \t\t</div>\r\n   );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\nreturn (\r\n\t<div className ='pa2'>\r\n\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange} //onchange event in html? an event: listening to anytime the input changes\r\n\t\t/>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n// props\r\n// state\r\n// children\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t<div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_PENDING';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchfield, requestRobots } from '../redux/actions';\r\n\r\nclass App extends React.Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst { searchfield, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => \r\n\t\t\trobot.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t\t<h1 className = 'f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange = {onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots = {filteredRobots}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tsearchfield: state.searchRobots.searchfield,\r\n\trobots: state.requestRobots.robots,\r\n\tisPending: state.requestRobots.isPending,\r\n\terror: state.requestRobots.error,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tonSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\r\n\tonRequestRobots: () => dispatch(requestRobots())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILURE \r\n} from './types';\r\n\r\nexport const setSearchfield = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }))\r\n}","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILURE \r\n} from './types';\r\n\r\nconst initialStateSearch = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchfield: action.payload});\r\n            // or return { ...state, searchfield: action.payload}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRquest = {\r\n    isPending: true,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRquest, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false }\r\n        case REQUEST_ROBOTS_FAILURE:\r\n            return { ...state, error: action.payload, isPending: false }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nimport { searchRobots, requestRobots } from './redux/reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}